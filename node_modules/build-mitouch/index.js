module.exports = function(gulp, env, settings, slides){
	var es = require('event-stream'),
		rename = require('gulp-rename'),
		template = require('gulp-template'),
		zip = require('gulp-zip'),
		path = require('path'),
		fs = require('fs'),

		scripts = {
			'mitouch-prevent-swipe': require('./plugins/gulp-mitouch-prevent-swipe'),
			'mitouch-resize-image': require('./plugins/gulp-resize-image')
		},
		// require('build'),
		structure = require(path.join(process.cwd(), env.structure)),

		destDir = path.join(env.dest, env.clm),
		ctlSrc = path.resolve(__dirname, './.mitouchctl');

	gulp.task('mitouch-copy', ['usemin'], function(){
		var pipes = slides.map(function(slide){
			return gulp.src(['assets/pdf.css'])
				.pipe(gulp.dest(slide.dest));
		});

		return es.concat.apply(es, pipes);
	});

	gulp.task('mitouch-xml', function(){
		var pipes = slides.map(function(slide){
			var parametersPath = 'app/parameters/' + slide.id + '.xml',
				callDialog = fs.existsSync(parametersPath) && fs.readFileSync(parametersPath, 'utf-8'),
				slides = Object.keys(structure.slides).map(function(slide){
					return {prefixed: addPrefix(slide)};
				});

			if(callDialog){
				callDialog = callDialog.substring(callDialog.indexOf('<'));
			}

			return gulp.src(ctlSrc)
				.pipe(template({
					id: slide.prefixed,
					slides: slides,
					callDialog: callDialog
				}))
				.pipe(rename('parameters.xml'))
				.pipe(gulp.dest(slide.dest + '/parameters'));
		});

		return es.concat.apply(es, pipes);
	});

	gulp.task('mitouch-thumbs', function(){

		var convert = 'converter/convert', pipes;

		pipes = slides.map(function(slide){
			var src = 'app/media/images/common/thumbs/',
				dest = slide.dest + '/media/images/',
				imageName = '200x150.jpg';

			return gulp.src([
				src + slide.id + '.jpg'
			])
				//				.pipe(scripts['resize-image']({width: 200, height: 150}))
				.pipe(rename(imageName))
				.pipe(gulp.dest(dest + 'thumbnails/'));

		});
		return es.concat.apply(es, pipes);
	});

	gulp.task('mitouch-prevent-swipe', ['usemin'], function(){
		var pipes = slides.map(function(slide){

			return gulp.src([
				slide.dest + '/index.html'
			])
				.pipe(scripts['mitouch-prevent-swipe'](slide.sid, env))
				.pipe(gulp.dest(slide.dest));
		});

		return es.concat.apply(es, pipes);
	});

	gulp.task('mitouch-zip', ['usemin', 'mitouch-copy', 'copy-common-media-inside', 'mitouch-xml', 'mitouch-thumbs', 'add-info'], function(){
		var pipes = slides.map(function(slide){

			return gulp.src(slide.dest + '/**')
				.pipe(zip(slide.prefixed + '.zip'))
				.pipe(gulp.dest(destDir));
		});

		return es.concat.apply(es, pipes);
	});

	gulp.task('mitouch-build', function(){
		return gulp.start('usemin', 'mitouch-prevent-swipe', 'mitouch-copy', 'copy-common-media-inside', 'mitouch-xml', 'mitouch-thumbs', 'add-info');
	});

	function addPrefix(slide){
		return (settings[env.clm + 'Prefix'] ? settings[env.clm + 'Prefix'] + '_' : '') + slide;
	}
};